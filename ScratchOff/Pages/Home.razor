@page "/"
@inject IIndexedDbFactory DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
<br />
<h3>Scartch Card List</h3>
<div>
    <QuickGrid Items="@AllCards"Class="table table-striped">
        <PropertyColumn Property="@(card => card.Id)" Title="Card-Id" />
        <PropertyColumn Property="@(card => card.Name)" />
        <PropertyColumn Property="@(card => card.StartNumber)" />
        <PropertyColumn Property="@(card => card.EndNumber)" />
        <PropertyColumn Property="@(card => card.TicketPrice)" Title="Ticket Price" />
        <PropertyColumn Property="@(card => (card.EndNumber - card.StartNumber) * card.TicketPrice)" Title="Amount" />
        <TemplateColumn Title="Actions">
            <button @onclick="@(() => HandleEdit(context.Id))">Edit</button>
            <button @onclick="@(() => HandleDeleteAsync(context))">Delete</button>
        </TemplateColumn>
        
    </QuickGrid>
</div>
<div>Total Amount = @Sum.ToString("C2")</div>
@code
{
    private IQueryable<Card>? AllCards{get; set;}
        
        [Parameter]
    public decimal Sum{get; set;}

   [Parameter]
   public decimal CardTotal{get; set;}
    
    protected override async Task OnInitializedAsync()
    { 
        using var db = await DbFactory.Create<ScratcherDb>();
        if(db.Cards is not null && db.Cards.Count < 1)
        {
            foreach(var x in InitialList())
            {
                db.Cards.Add(x);
            }
        }
        await db.SaveChanges();
        AllCards = (db.Cards!).AsQueryable(); 
        
    
    }

    private async Task RefreshCardList()
    {
        using var db = await DbFactory.Create<ScratcherDb>();
        AllCards = (db!.Cards)!.AsQueryable(); 
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshCardList();
        if(AllCards is null)
        {
            CardTotal = 0;
    
        }
        
        foreach(var x in AllCards)
        {
            CardTotal = (x.EndNumber - x.StartNumber) * x.TicketPrice;
            Sum += CardTotal;
        }
        
        
        await Task.CompletedTask;
    }

    private void HandleEdit(int cardId)
    {
        if(cardId == 0)
        {
            return;
        }
        NavigationManager.NavigateTo($"/cardedit/{cardId}");
        
    }

 

    private async Task HandleDeleteAsync(Card card)
    {
        if(card is  null)
        {
            return;
        }

        using var db = await DbFactory.Create<ScratcherDb>();
        var cardToDelete = db.Cards!.FirstOrDefault(c => c.Id == card.Id);
        
        if(cardToDelete != null)
        {
            db.Cards!.Remove(cardToDelete);
            await db.SaveChanges();
            await RefreshCardList();
        }
        
        //NavigationManager.NavigateTo("/");
    }

private static  List<Card> InitialList()
    {
        List<Card> cards = new()
            {
                new Card{Id = 1, Name = "a", StartNumber = 1, EndNumber = 35, TicketPrice = 5},
                new Card{Id = 2, Name = "b", StartNumber = 0, EndNumber = 0, TicketPrice = 0},
                new Card{Id = 3, Name = "c", StartNumber = 3, EndNumber = 34, TicketPrice = 10},
                new Card{Id = 4, Name = "d", StartNumber = 0, EndNumber = 0, TicketPrice = 0},
                new Card{Id = 5, Name = "e", StartNumber = 0, EndNumber = 0, TicketPrice = 0}     

            };
            return cards;
    }
   
}
